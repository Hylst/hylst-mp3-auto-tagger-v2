// Script de test pour MP3 Auto Tagger
const fs = require('fs');
const path = require('path');
const axios = require('axios');

// Configuration
const API_BASE_URL = 'http://localhost:3002/api';
const TEST_MP3_PATH = path.join(__dirname, 'test-files', 'test-sample.mp3');
const UPLOADS_DIR = path.join(__dirname, 'uploads');

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m'
};

// Fonction pour afficher des messages format√©s
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// V√©rifier si le serveur est en cours d'ex√©cution
async function checkServerStatus() {
  try {
    log('üîç V√©rification du statut du serveur...', colors.blue);
    await axios.get(`${API_BASE_URL}/status`);
    log('‚úì Le serveur est en cours d'ex√©cution', colors.green);
    return true;
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      log('‚úó Le serveur n\'est pas en cours d\'ex√©cution. Veuillez d√©marrer le serveur avec "npm run dev"', colors.red);
    } else {
      log(`‚úó Erreur lors de la v√©rification du statut du serveur: ${error.message}`, colors.red);
    }
    return false;
  }
}

// Cr√©er le dossier de test et le fichier MP3 de test si n√©cessaire
function prepareTestEnvironment() {
  try {
    log('üîß Pr√©paration de l\'environnement de test...', colors.blue);
    
    // Cr√©er le dossier test-files s'il n'existe pas
    const testFilesDir = path.join(__dirname, 'test-files');
    if (!fs.existsSync(testFilesDir)) {
      fs.mkdirSync(testFilesDir, { recursive: true });
      log('‚úì Dossier test-files cr√©√©', colors.green);
    }
    
    // V√©rifier si le fichier MP3 de test existe
    if (!fs.existsSync(TEST_MP3_PATH)) {
      log('‚ö†Ô∏è Aucun fichier MP3 de test trouv√©. Veuillez placer un fichier MP3 dans le dossier test-files avec le nom "test-sample.mp3"', colors.yellow);
      return false;
    }
    
    // V√©rifier si le dossier uploads existe
    if (!fs.existsSync(UPLOADS_DIR)) {
      fs.mkdirSync(UPLOADS_DIR, { recursive: true });
      log('‚úì Dossier uploads cr√©√©', colors.green);
    }
    
    log('‚úì Environnement de test pr√™t', colors.green);
    return true;
  } catch (error) {
    log(`‚úó Erreur lors de la pr√©paration de l'environnement de test: ${error.message}`, colors.red);
    return false;
  }
}

// Tester l'upload de fichier
async function testFileUpload() {
  try {
    log('üß™ Test de l\'upload de fichier...', colors.blue);
    
    // Cr√©er un FormData et ajouter le fichier MP3
    const formData = new FormData();
    const fileBuffer = fs.readFileSync(TEST_MP3_PATH);
    const blob = new Blob([fileBuffer], { type: 'audio/mpeg' });
    formData.append('files', blob, 'test-sample.mp3');
    
    // Envoyer la requ√™te
    const response = await axios.post(`${API_BASE_URL}/upload`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    });
    
    if (response.data.success) {
      log('‚úì Test d\'upload r√©ussi', colors.green);
      return response.data.files[0];
    } else {
      log(`‚úó √âchec du test d'upload: ${response.data.error}`, colors.red);
      return null;
    }
  } catch (error) {
    log(`‚úó Erreur lors du test d'upload: ${error.message}`, colors.red);
    return null;
  }
}

// Tester l'analyse des m√©tadonn√©es
async function testMetadataAnalysis(fileInfo) {
  try {
    log('üß™ Test de l\'analyse des m√©tadonn√©es...', colors.blue);
    
    // V√©rifier si l'analyse a √©t√© effectu√©e lors de l'upload
    if (fileInfo.analysis) {
      log('‚úì Analyse des m√©tadonn√©es r√©ussie', colors.green);
      log('üìã R√©sultats de l\'analyse:', colors.blue);
      console.log(JSON.stringify(fileInfo.analysis, null, 2));
      return true;
    } else {
      log('‚úó Aucune analyse de m√©tadonn√©es trouv√©e dans la r√©ponse', colors.red);
      return false;
    }
  } catch (error) {
    log(`‚úó Erreur lors du test d'analyse des m√©tadonn√©es: ${error.message}`, colors.red);
    return false;
  }
}

// Tester la g√©n√©ration de couverture
async function testCoverArtGeneration(fileInfo) {
  try {
    log('üß™ Test de la g√©n√©ration de couverture...', colors.blue);
    
    // V√©rifier si des mots-cl√©s sont disponibles
    if (!fileInfo.analysis.keywords || fileInfo.analysis.keywords.length === 0) {
      log('‚ö†Ô∏è Aucun mot-cl√© disponible pour la g√©n√©ration de couverture', colors.yellow);
      return false;
    }
    
    // Envoyer la requ√™te
    const response = await axios.post(`${API_BASE_URL}/generate-cover`, {
      keywords: fileInfo.analysis.keywords
    });
    
    if (response.data.success) {
      log('‚úì Test de g√©n√©ration de couverture r√©ussi', colors.green);
      log(`üì∑ URL de la couverture: ${response.data.imageUrl}`, colors.blue);
      return true;
    } else {
      log(`‚úó √âchec du test de g√©n√©ration de couverture: ${response.data.error}`, colors.red);
      return false;
    }
  } catch (error) {
    log(`‚úó Erreur lors du test de g√©n√©ration de couverture: ${error.message}`, colors.red);
    return false;
  }
}

// Tester l'√©criture des tags
async function testWriteTags(fileInfo) {
  try {
    log('üß™ Test de l\'√©criture des tags...', colors.blue);
    
    // Envoyer la requ√™te
    const response = await axios.post(`${API_BASE_URL}/write-tags`, {
      filePath: fileInfo.path,
      metadata: fileInfo.analysis
    });
    
    if (response.data.success) {
      log('‚úì Test d\'√©criture des tags r√©ussi', colors.green);
      return true;
    } else {
      log(`‚úó √âchec du test d'√©criture des tags: ${response.data.error}`, colors.red);
      return false;
    }
  } catch (error) {
    log(`‚úó Erreur lors du test d'√©criture des tags: ${error.message}`, colors.red);
    return false;
  }
}

// Fonction principale
async function runTests() {
  log('üöÄ D√©marrage des tests pour MP3 Auto Tagger', colors.blue);
  
  // V√©rifier si le serveur est en cours d'ex√©cution
  const serverRunning = await checkServerStatus();
  if (!serverRunning) return;
  
  // Pr√©parer l'environnement de test
  const environmentReady = prepareTestEnvironment();
  if (!environmentReady) return;
  
  // Tester l'upload de fichier
  const fileInfo = await testFileUpload();
  if (!fileInfo) return;
  
  // Tester l'analyse des m√©tadonn√©es
  const analysisSuccess = await testMetadataAnalysis(fileInfo);
  if (!analysisSuccess) return;
  
  // Tester la g√©n√©ration de couverture
  const coverGenSuccess = await testCoverArtGeneration(fileInfo);
  
  // Tester l'√©criture des tags
  const writeTagsSuccess = await testWriteTags(fileInfo);
  
  // R√©sum√© des tests
  log('\nüìã R√©sum√© des tests:', colors.blue);
  log(`- Upload de fichier: ${fileInfo ? '‚úì' : '‚úó'}`, fileInfo ? colors.green : colors.red);
  log(`- Analyse des m√©tadonn√©es: ${analysisSuccess ? '‚úì' : '‚úó'}`, analysisSuccess ? colors.green : colors.red);
  log(`- G√©n√©ration de couverture: ${coverGenSuccess ? '‚úì' : '‚úó'}`, coverGenSuccess ? colors.green : colors.red);
  log(`- √âcriture des tags: ${writeTagsSuccess ? '‚úì' : '‚úó'}`, writeTagsSuccess ? colors.green : colors.red);
  
  if (fileInfo && analysisSuccess && coverGenSuccess && writeTagsSuccess) {
    log('\n‚úÖ Tous les tests ont r√©ussi! L\'application est pr√™te pour le d√©ploiement.', colors.green);
  } else {
    log('\n‚ö†Ô∏è Certains tests ont √©chou√©. Veuillez corriger les probl√®mes avant le d√©ploiement.', colors.yellow);
  }
}

// Ex√©cuter les tests
runTests();